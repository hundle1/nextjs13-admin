generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


// model Wallet {
//   id          String @id @default(uuid())
//   userId      String
//   address     String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

model Store {
  id              String        @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[]   @relation("StoreToBillboard")
  categories      Category[]    @relation("StoreToCategory")
  products        Product[]     @relation("StoreToProduct")
  supply          Supply[]      @relation("StoreToSupply")
  // file            File[]        @relation("StoreToFile")
  details         Detail[]      @relation("StoreToDetail")
  colors          Color[]       @relation("StoreToColor")
  orders          Order[]       @relation("StoreToOrder")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String        @id @default(uuid())
  userId      String        // Foreign Key 
  storeId     String        // Foreign Key to Store
  store       Store         @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String        // Foreign Key to Category
  category    Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  supply      Int
  isArchived  Boolean       @default(false)
  isFeatured  Boolean       @default(false)
  // fileId      String        // Foreign Key to File
  // file        File          @relation(fields: [fileId], references: [id])
  detailId      String        // Foreign Key to 
  detail        Detail          @relation(fields: [detailId], references: [id])
  colorId     String        // Foreign Key to 
  color       Color         @relation(fields: [colorId], references: [id])
  images      Image[]       // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([storeId])
  @@index([categoryId])
  @@index([detailId])
  @@index([colorId])
  // @@index([fileId])
}

model Order {
  id        String        @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]  // Relation to OrderItem model
  isPaid     Boolean      @default(false)
  phone      String       @default("")
  address    String       @default("")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// model File {
//   id          String @id @default(uuid())
//   data        Bytes
//   storeId     String    // Foreign Key to Store
//   store       Store     @relation("StoreToFile", fields: [storeId], references: [id])
//   productId   String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   @@index([productId])
//   @@index([storeId])

// }

model Detail {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToDetail", fields: [storeId], references: [id])
  name        String
  info        String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}


model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Supply {
  id String @id @default(uuid())
  value       Int
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToSupply", fields: [storeId], references: [id])
  productId   String   // Foreign Key to Product
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

